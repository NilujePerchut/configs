#!/usr/bin/python
"""Just a bunch of utilties"""

import sys
import argparse

PPI_DIFF_HEADERS = [ '--- a/', '+++ b/', 'diff --git a/' ]

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

class Cdbox:
    """The top most class. Each command must be prefixed with cmd_"""
    def __init__(self):
        pass

    ##### User commands below
    #########################

    def cmd_ppi(self, argv):
        """Patch path inserter"""
        parser = argparse.ArgumentParser(
                 description='insert path prefix into diff file paths')
        parser.add_argument('path', help='the path to be insered')
        parser.add_argument('filename', help='the patch file to modify')
        args = parser.parse_args(argv)

        #Check some slash problems
        if args.path[-1] != '/':
            args.path += '/'
        if args.path[0] == '/':
            args.path = args.path[1:]

        with open(args.filename, 'r') as myfiler:
            lines = myfiler.readlines()
        for i, line in enumerate(lines):
            for header in PPI_DIFF_HEADERS:
                if line.startswith(header):
                    lines[i] = header + args.path + line[len(header):]
                    if header == 'diff --git a/':
                        #do the second part
                        parts = lines[i].split(' b/')
                        lines[i] = parts[0] + ' b/' + args.path + parts[1]
        #Write back the diff file
        with open(args.filename, 'w') as myfilew:
            myfilew.writelines(lines)

    def __cmd_default(self, cmd):
        """Default command"""
        print('Error: {0}: this command does not exists'.format(cmd))

    ##### Management commands below
    ###############################

    def mgm_install(self, argv):
        """install links in given directory (might be call as root)"""
        parser = argparse.ArgumentParser(
                 description='install cdbox on your system')
        parser.add_argument('PATH', help='install path')
        args = parser.parse_args(argv[1:])
        print('Installing in ... {0}'.format(args.path))

    def mgm_uninstall(self, argv):
        """uninstall links in given directory (might be call as root)"""
        parser = argparse.ArgumentParser(
                 description='remove cdbox from your system')
        print('Uninstalling in ...')

    def mgm_list(self, argv):
        """lists all management commands"""
        parser = argparse.ArgumentParser(
                description='list all available commands')
        parser.add_argument('--commands', '-c', help='lists all the commands',
                            action="store_true")
        args = parser.parse_args(argv[1:])
        prefix = 'mgm_'
        if args.commands :
            prefix = 'cmd_'
        for i in self.__list_cmds(prefix):
            print('{0}{1}{2}:{3}'.format( bcolors.OKGREEN,
                                            i,
                                            bcolors.ENDC,
                                            getattr(self, prefix + i).__doc__))

    ##### Commonfunctions below
    ###########################
    def __list_cmds(self, prefix):
        """lists all the possible commands of the given prefix"""
        return [i[4:] for i in dir(self) if i.startswith(prefix) ]

    def __mgm_default(self, cmd):
        """Default mgm"""
        print('Error: {0}: this command does not exists'.format(cmd));

    def cdbox_parse_command_line(self, cmdargs):
        """The main command line dispatcher"""
        cmd = cmdargs[0].split('/')[-1]
        if cmd.startswith('cdbox') :
            prefix = 'mgm_'
            default_func = self.__mgm_default
            cmd = cmdargs[1]
        else:
            prefix = 'cmd_'
            default_func = self.__cmd_default
        try:
            func = getattr(self, prefix + cmd)
        except AttributeError:
            return default_func(cmd)
        return func(cmdargs[1:])

if __name__ == '__main__':
    Cdbox().cdbox_parse_command_line(sys.argv)

